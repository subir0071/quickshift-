.TH "hub-release" "1" "13 Feb 2019" "hub version 2.9.0" "Manage GitHub Releases for the current repository."
.nh
.ad l
.SH "SYNOPSIS"
.P
\fB\fChub release\fR [\-\-include\-drafts] [\-\-exclude\-prereleases] [\-L \fILIMIT\fP] [\-f \fIFORMAT\fP]
.br
\fB\fChub release\fR show [\-f \fIFORMAT\fP] \fITAG\fP
.br
\fB\fChub release\fR create [\-dpoc] [\-a \fIFILE\fP] [\-m \fIMESSAGE\fP|\-F \fIFILE\fP] [\-t \fITARGET\fP] \fITAG\fP
.br
\fB\fChub release\fR edit [\fIoptions\fP] \fITAG\fP
.br
\fB\fChub release\fR download \fITAG\fP
.br
\fB\fChub release\fR delete \fITAG\fP
.SH "COMMANDS"
.P
With no arguments, shows a list of existing releases.
.P
With \fB\fC\-\-include\-drafts\fR, include draft releases in the listing.
With \fB\fC\-\-exclude\-prereleases\fR, exclude non\-stable releases from the listing.
.PP
\fIshow\fP
.RS 4
Show GitHub release notes for \fITAG\fP.
.sp
With \fB\fC\-\-show\-downloads\fR, include the "Downloads" section.
.RE
.PP
\fIcreate\fP
.RS 4
Create a GitHub release for the specified \fITAG\fP name. If git tag \fITAG\fP
does not exist, it will be created at \fITARGET\fP (default: current branch).
.RE
.PP
\fIedit\fP
.RS 4
Edit the GitHub release for the specified \fITAG\fP name. Accepts the same
options as \fIcreate\fP command. Publish a draft with \fB\fC\-\-draft=false\fR.
.sp
When \fIMESSAGE\fP or \fIFILE\fP are not specified, a text editor will open
pre\-populated with current release title and body. To re\-use existing title
and body unchanged, pass \fB\fC\-m ""\fR.
.RE
.PP
\fIdownload\fP
.RS 4
Download the assets attached to release for the specified \fITAG\fP.
.RE
.PP
\fIdelete\fP
.RS 4
Delete the release and associated assets for the specified \fITAG\fP.
.RE
.br
.SH "OPTIONS"
.PP
\-L, \-\-limit
.RS 4
Display only the first \fILIMIT\fP releases.
.RE
.PP
\-d, \-\-draft
.RS 4
Create a draft release.
.RE
.PP
\-p, \-\-prerelease
.RS 4
Create a pre\-release.
.RE
.PP
\-a, \-\-attach \fIFILE\fP
.RS 4
Attach a file as an asset for this release.
.sp
If \fIFILE\fP is in the "\fIfilename\fP#\fItext\fP" format, the text after the \fB\fC#\fR
character is taken as asset label.
.RE
.PP
\-m, \-\-message \fIMESSAGE\fP
.RS 4
The text up to the first blank line in \fIMESSAGE\fP is treated as the release
title, and the rest is used as release description in Markdown format.
.sp
If multiple \fIMESSAGE\fP options are given, their values are concatenated as
separate paragraphs.
.RE
.PP
\-F, \-\-file \fIFILE\fP
.RS 4
Read the release title and description from \fIFILE\fP.
.RE
.PP
\-e, \-\-edit
.RS 4
Further edit the contents of \fIFILE\fP in a text editor before submitting.
.RE
.PP
\-o, \-\-browse
.RS 4
Open the new release in a web browser.
.RE
.PP
\-c, \-\-copy
.RS 4
Put the URL of the new release to clipboard instead of printing it.
.RE
.PP
\-t, \-\-commitish \fITARGET\fP
.RS 4
A commit SHA or branch name to attach the release to, only used if \fITAG\fP
does not already exist (default: main branch).
.RE
.PP
\-f, \-\-format \fIFORMAT\fP
.RS 4
Pretty print releases using \fIFORMAT\fP (default: "%T%n"). See the "PRETTY
FORMATS" section of git\-log(1) for some additional details on how
placeholders are used in format. The available placeholders for issues are:
.sp
%U: the URL of this release
.sp
%uT: tarball URL
.sp
%uZ: zipball URL
.sp
%uA: asset upload URL
.sp
%S: state (i.e. "draft", "pre\-release")
.sp
%sC: set color to yellow or red, depending on state
.sp
%t: release name
.sp
%T: release tag
.sp
%b: body
.sp
%as: the list of assets attached to this release
.sp
%cD: created date\-only (no time of day)
.sp
%cr: created date, relative
.sp
%ct: created date, UNIX timestamp
.sp
%cI: created date, ISO 8601 format
.sp
%pD: published date\-only (no time of day)
.sp
%pr: published date, relative
.sp
%pt: published date, UNIX timestamp
.sp
%pI: published date, ISO 8601 format
.sp
%n: newline
.sp
%%: a literal %
.RE
.PP
\fITAG\fP
.RS 4
The git tag name for this release.
.RE
.br
.SH "SEE ALSO"
.P
hub(1), git\-tag(1)

